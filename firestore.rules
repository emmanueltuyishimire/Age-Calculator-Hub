/**
 * @fileoverview Firestore Security Rules for AgeSage application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access their own data. All data is nested under /users/{userId}.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/biologicalAgeResults/{biologicalAgeResultId}: Stores biological age results for a user.
 * - /users/{userId}/pets/{petId}: Stores pet information for a user.
 * - /users/{userId}/retirementCalculations/{retirementCalculationId}: Stores retirement calculation results for a user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own documents and data within their user-specific path.
 * - List operations are restricted to the owner of the data.
 * - No public data access is allowed.
 *
 * Denormalization for Authorization:
 * - The data model already includes the 'userId' on child documents, enabling simple, performant rules based on ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can get, update, or delete their own profile.
     * @deny (create) Creation is denied if the userId does not match the authenticated user's UID.
     * @deny (get, update, delete) Access is denied if the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to biological age calculation results for a specific user.
     * @path /users/{userId}/biologicalAgeResults/{biologicalAgeResultId}
     * @allow (create, get, list, update, delete) Authenticated user can manage their own biological age results.
     * @deny (create, get, list, update, delete) Access is denied if the authenticated user's UID does not match the userId.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/biologicalAgeResults/{biologicalAgeResultId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to pet information for a specific user.
     * @path /users/{userId}/pets/{petId}
     * @allow (create, get, list, update, delete) Authenticated user can manage their own pet information.
     * @deny (create, get, list, update, delete) Access is denied if the authenticated user's UID does not match the userId.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/pets/{petId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to retirement calculation results for a specific user.
     * @path /users/{userId}/retirementCalculations/{retirementCalculationId}
     * @allow (create, get, list, update, delete) Authenticated user can manage their own retirement calculation results.
     * @deny (create, get, list, update, delete) Access is denied if the authenticated user's UID does not match the userId.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/retirementCalculations/{retirementCalculationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }
  }
}